@page "/create-user"
@using KalendarzPracowniczyApplication.CQRS.Commands.Users.Create
@using KalendarzPracowniczyUI.Service
@rendermode InteractiveServer
@inject UserServiceUI UserServiceUI
<style>
    .create-user-container {
        max-width: 500px;
        margin: 0 auto;
        margin-top: 120px;
        padding: 40px;
        background-color: #2b2f3a; 
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
        color: #f1f1f1; 
    }

        .create-user-container h1 {
            text-align: center;
            color: #78909c; 
        }

    .input-group {
        position: relative;
        margin-bottom: 15px;
    }

        /* Styl etykiety (placeholder) */
        .input-group label {
            position: absolute;
            left: 10px;
            top: 14px;
            color: rgba(255, 255, 255, 0.7); 
            font-size: 16px;
            transition: 0.2s ease all;
            pointer-events: none;
        }

        .input-group input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #546e7a; 
            border-radius: 5px;
            box-sizing: border-box;
            background-color: #37474f; 
            color: #f1f1f1;
        }

            .input-group input:focus {
                outline: none;
                background-color: #444;
                border-color: #78909c; 
            }

                /* Efekt animacji etykiety */
                .input-group input:focus + label,
                .input-group input:not(:placeholder-shown) + label {
                    top: -18px;
                    font-size: 12px;
                    color: #78909c; 
                }

    .create-user-container button {
        width: 100%;
        padding: 10px;
        background-color: #546e7a; 
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

        .create-user-container button:hover {
            background-color: #78909c; 
        }

    .message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }

    .success-message {
        color: green;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }
</style>


<div class="menu-item">
    <a class="menu-link @menuClickedClass" @onclick="ShowMenu">
        <i class="fa-sharp fa-solid fa-bars fa-flip-vertical fa-2xl"></i>
        <span class="menu-text">Główne menu</span>
    </a>
</div>
    <div class="create-user-container">
        <h1>Stwórz nowego użytkownika</h1>

        <EditForm Model="@userCommand" OnValidSubmit="CreateUserAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <InputText id="name" @bind-Value="userCommand.Name" required placeholder=" " />
                <label for="name">Imię</label>
            </div>

            <div class="input-group">
                <InputText id="surname" @bind-Value="userCommand.Surname" required placeholder=" " />
                <label for="surname">Nazwisko</label>
            </div>

            <div class="input-group">
                <InputText id="username" @bind-Value="userCommand.UserName" required placeholder=" " />
                <label for="username">Nazwa użytkownika</label>
            </div>

            <div class="input-group">
                <InputText id="password" @bind-Value="userCommand.Password" type="password" required placeholder=" " />
                <label for="password">Hasło</label>
            </div>

            <div class="input-group">
                <InputText id="email" @bind-Value="userCommand.Email" required placeholder=" " />
                <label for="email">Email</label>
            </div>

            <button type="submit">Stwórz użytkownika</button>

            @if (errorMessage != null)
            {
                <div class="message">@errorMessage</div>
                <div class="loader"></div>
            }

            @if (successMessage != null)
            {
                <div class="success-message">@successMessage</div>
            }

            @if (isLoading)
            {
                <div class="loader"></div>
            }
        </EditForm>
</div>
@if (isMenuVisible)
{
    <NavigationMenu />
}

@code {
    [SupplyParameterFromForm]
    private CreateUserCommand userCommand { get; set; } = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private bool isMenuVisible = false;
    private string menuClickedClass = "";

    private async Task CreateUserAsync()
    {
        try
        {
            isLoading = true;
            await UserServiceUI.Create(userCommand);
            successMessage = "Użytkownik został pomyślnie stworzony!";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            successMessage = null;
        }
        finally
        {
            isLoading = false;
        }

    }
    private void ShowMenu()
    {
        isMenuVisible = !isMenuVisible;

        if (isMenuVisible)
        {
            menuClickedClass = "menu-clicked";
        }
        else
        {
            menuClickedClass = "";
        }
    }
}








