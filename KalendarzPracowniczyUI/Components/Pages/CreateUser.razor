@page "/create-user"
@using KalendarzPracowniczyApplication.CQRS.Commands.Users.Create
@using KalendarzPracowniczyUI.Service
@rendermode InteractiveServer
@inject UserServiceUI UserServiceUI
<style>
    .form-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: 0 auto;
        margin-top: 150px; 
        padding: 40px;
        background-color: rgba(0, 10, 30, 0.85);
        border-radius: 12px;
        box-shadow: 0 0 20px rgba(0, 150, 255, 0.4);
        color: #f1f1f1;
        backdrop-filter: blur(10px);
    }

    .form-left {
        width: 50%;
        padding-right: 20px;
    }

    .form-right {
        width: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .company-logo {
        max-width: 80%;
        height: auto;
    }

    .form-left h1 {
        text-align: center;
        color: #00aaff;
        text-shadow: 0 0 8px rgba(0, 170, 255, 0.8), 0 0 12px rgba(0, 170, 255, 0.6);
        font-size: 28px;
        margin-bottom: 20px;
    }

    /* Grupa inputów */
    .input-group {
        position: relative;
        margin-bottom: 20px;
    }

        /* Etykieta (placeholder) */
        .input-group label {
            position: absolute;
            left: 12px;
            top: 14px;
            color: rgba(255, 255, 255, 0.7);
            font-size: 16px;
            transition: 0.2s ease all;
            pointer-events: none;
        }

        /* Pola input */
        .input-group input {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid rgba(0, 150, 255, 0.5);
            border-radius: 8px;
            box-sizing: border-box;
            background-color: rgba(255, 255, 255, 0.1);
            color: #f1f1f1;
            transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
        }

            .input-group input:focus {
                outline: none;
                background-color: rgba(255, 255, 255, 0.2);
                border-color: #00aaff;
                box-shadow: 0 0 10px rgba(0, 150, 255, 0.5), inset 0 0 8px rgba(0, 150, 255, 0.4);
            }

                /* Animacja etykiety */
                .input-group input:focus + label,
                .input-group input:not(:placeholder-shown) + label {
                    top: -18px;
                    font-size: 12px;
                    color: #00aaff;
                }

    /* Przycisk formularza */
    button {
        width: 100%;
        padding: 12px;
        background-color: rgba(0, 150, 255, 0.5);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
    }

        button:hover {
            background-color: #00aaff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6);
        }

    /* Wiadomości */
    .message {
        color: #ff4c4c;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
        font-size: 16px;
        box-shadow: 0 0 10px rgba(255, 0, 0, 0.4);
    }

    .success-message {
        color: #00ff00;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
        font-size: 16px;
        box-shadow: 0 0 10px rgba(0, 255, 0, 0.4);
</style>

<NavigationMenu />
<div class="form-container">
    <div class="form-left">
        <h1>Stwórz nowe konto</h1>

        <EditForm Model="@userCommand" OnValidSubmit="CreateUserAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <InputText id="name" @bind-Value="userCommand.Name" required placeholder=" " />
                <label for="name">Imię</label>
            </div>
            <div class="input-group">
                <InputText id="surname" @bind-Value="userCommand.Surname" required placeholder=" " />
                <label for="surname">Nazwisko</label>
            </div>
            <div class="input-group">
                <InputText id="username" @bind-Value="userCommand.UserName" required placeholder=" " />
                <label for="username">Nazwa użytkownika</label>
            </div>
            <div class="input-group">
                <InputText id="password" @bind-Value="userCommand.Password" type="password" required placeholder=" " />
                <label for="password">Hasło</label>
            </div>
            <div class="input-group">
                <InputText id="email" @bind-Value="userCommand.Email" required placeholder=" " />
                <label for="email">Email</label>
            </div>

            <button type="submit">Stwórz konto</button>

            @if (errorMessage != null)
            {
                <div class="message">@errorMessage</div>
            }

            @if (successMessage != null)
            {
                <div class="success-message">@successMessage</div>
            }

            @if (isLoading)
            {
                <div class="loader"></div>
            }
        </EditForm>
    </div>
    <div class="form-right">
        <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" alt="Logo Unisoft" class="company-logo" />
    </div>
</div>

@code {
    private CreateUserCommand userCommand = new CreateUserCommand();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private bool isMenuVisible = false;
    private string menuClickedClass = "";

    private async Task CreateUserAsync()
    {
        try
        {
            isLoading = true;
            await UserServiceUI.Create(userCommand);
            successMessage = "Użytkownik został pomyślnie stworzony!";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            successMessage = null;
        }
        finally
        {
            isLoading = false;
        }

    }
    private void ShowMenu()
    {
        isMenuVisible = !isMenuVisible;

        if (isMenuVisible)
        {
            menuClickedClass = "menu-clicked";
        }
        else
        {
            menuClickedClass = "";
        }
    }
}








