@page "/create-user"
@using KalendarzPracowniczyApplication.CQRS.Commands.Users.Create
@using KalendarzPracowniczyUI.Service
@rendermode InteractiveServer
@inject UserServiceUI UserServiceUI
<style>
    .create-user-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1a1a1a;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        color: #f1f1f1;
    }

        .create-user-container h3 {
            text-align: center;
            color: #007bff;
        }

        .create-user-container label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #007bff;
        }

        .create-user-container input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #333;
            border-radius: 5px;
            box-sizing: border-box;
            background-color: #333;
            color: #f1f1f1;
        }

        .create-user-container button {
            width: 100%;
            padding: 10px;
            background-color: #0056b3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

            .create-user-container button:hover {
                background-color: #003d80;
            }

    .message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }

    .success-message {
        color: green;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }

</style>

<NavigationMenu />
<div class="create-user-container">
    <h3>Stwórz nowego użytkownika</h3>

    <EditForm Model="@userCommand" OnValidSubmit="CreateUserAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="name">Imię</label>
        <InputText id="name" @bind-Value="userCommand.Name" placeholder="Wprowadź imię użytkownika" />

        <label for="surname">Nazwisko</label>
        <InputText id="surname" @bind-Value="userCommand.Surname" placeholder="Wprowadź nazwisko" />

        <label for="username">Nazwa użytkownika</label>
        <InputText id="username" @bind-Value="userCommand.UserName" placeholder="Wprowadź nazwę użytkownika do logowania" />

        <label for="password">Hasło</label>
        <InputText id="password" @bind-Value="userCommand.Password" type="password" placeholder="Wprowadź hasło" />

        <label for="email">Email</label>
        <InputText id="email" @bind-Value="userCommand.Email" placeholder="Wprowadź email" />


        <button type="submit">Stwórz użytkownika</button>

        @if (errorMessage != null)
        {
            <div class="message">@errorMessage</div>
                    <div class="loader"></div>
        }

        @if (successMessage != null)
        {
            <div class="success-message">@successMessage</div>
            
        }
        @if (isLoading)
        {
            <div class="loader"></div>
        }
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateUserCommand userCommand { get; set; } = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private async Task CreateUserAsync()
    {
        try
        {
            isLoading = true;
            await UserServiceUI.Create(userCommand);
            successMessage = "Użytkownik został pomyślnie stworzony!";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            successMessage = null;
        }
        finally
        {
            isLoading = false;
        }

    }
}








