@page "/kalendarz"
@using System.Globalization
@using KalendarzPracowniczyApplication.Dto
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@rendermode InteractiveServer
<style>
    html, body {
        background-image: url("unisoft.png");
    }
</style>
@if (!isAuthenticated)
{
    <p>Przekierowanie na stronę logowania...</p>
}
else
{
    <div class="menu-item">
        <a class="menu-link @menuClickedClass" @onclick="ShowMenu">
            <i class="fa-sharp fa-solid fa-bars fa-flip-vertical fa-2xl"></i>
            <span class="menu-text">Główne menu</span>
        </a>
    </div>
    <div class="weekly-schedule-container">
        <div class="logo-page">
            <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" />
        </div>
        <div class="calendar-controls">
            <button @onclick="PreviousWeek">❮ Poprzedni tydzień</button>
            <h2>@currentWeekStart.ToString("MMMM yyyy", new System.Globalization.CultureInfo("pl-PL"))</h2>
            <button @onclick="NextWeek">Następny tydzień ❯</button>
        </div>
        <div class="schedule-grid">
            <div class="schedule-header">
                <div class="schedule-column">Pracownicy</div>
                @foreach (var day in GetDaysOfWeek())
                {
                    <div class="schedule-column">
                        @day.ToString("ddd", new System.Globalization.CultureInfo("pl-PL"))<br />
                        @day.Day
                    </div>
                }
            </div>
            
            @foreach (var user in users)
            {
                <div class="schedule-row">
                    <div class="employee-cell">@user.FirstName @user.LastName</div>
                    @foreach (var day in GetDaysOfWeek())
                    {
                        <div class="day-cell-wrapper">
                            <div @onclick="() => ShowModal(day)" class="day-cell @(day.Date == DateTime.Today.Date ? "today" : "")"></div>
                            <a @onclick="ShowSecondModal" class="fa-solid fa-pen"></a>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    @if (selectedDay.HasValue)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="HideModal">&times;</h1>
                <CreateEvent />
            </div>
        </div>
    }
    @if (isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModal">&times;</h1>
                <UpdateEvent />
            </div>
        </div>
    }
    @if (isLoading)
    {
        <div class="loader"></div>
    }
    @if (isMenuVisible)
    {
        <NavigationMenu />
    }
}


@code {
    private DateTime? selectedDay = null;
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isMenuVisible = false;
    private string menuClickedClass = "";
    private bool isAuthenticated = false;
    private bool shouldRedirect = false;


    /* To do pobieranie wszystkich użytkowników!*/

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldRedirect)
        {
            Navigation.NavigateTo("/"); 
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _httpClient.GetAsync("api/User/me");

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UserDto>();

                if (user != null)
                {
                    isAuthenticated = true;
                }
            }
            if (!isAuthenticated)
            {
                shouldRedirect = true; 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas sprawdzania zalogowanego użytkownika: {ex.Message}");
            shouldRedirect = true; 
        }
    }
    private void ShowMenu()
    {
        isMenuVisible = !isMenuVisible;

        if (isMenuVisible)
        {
            menuClickedClass = "menu-clicked";
        }
        else
        {
            menuClickedClass = "";
        }
    }

    private void CloseModal()
    {
        isVisible = false;
    }

    private void ShowSecondModal()
    {
        isVisible = true;
    }

    private void HideModal()
    {
        selectedDay = null;
    }

    private void ShowModal(DateTime day)
    {
        selectedDay = day;
    }

    private bool IsModalVisible(DateTime day)
    {
        return selectedDay.HasValue && selectedDay.Value.Date == day.Date;
    }

    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

    private IEnumerable<DateTime> GetDaysOfWeek()
    {
        return Enumerable.Range(0, 5).Select(offset => currentWeekStart.AddDays(offset));
    }

    private void PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        StateHasChanged();
    }

    private void NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        StateHasChanged();
    }
}