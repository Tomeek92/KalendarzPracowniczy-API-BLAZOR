@page "/kalendarz"
@using KalendarzPracowniczyUI.Components.Pages
@using System.Globalization
@using KalendarzPracowniczyApplication.Dto
@using System.Security.Claims
@using KalendarzPracowniczyUI.Service
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserServiceUI UserService
@inject EventServiceUI EventService
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@rendermode InteractiveServer
<style>
    html, body {
        background-image: url("unisoft.png");
    }
</style>
@if (!isAuthenticated)
{
    <p>Przekierowanie na stronę logowania...</p>
}
else
{
    <div class="menu-item">
        <a class="menu-link @menuClickedClass" @onclick="ShowMenu">
            <i class="fa-sharp fa-solid fa-bars fa-flip-vertical fa-2xl"></i>
            <span class="menu-text">Główne menu</span>
        </a>
    </div>
    <div class="weekly-schedule-container">
        <div class="logo-page">
            <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" />
        </div>
        <div class="calendar-controls">
            <button @onclick="PreviousWeek">❮ Poprzedni tydzień</button>
            <h2>@currentWeekStart.ToString("MMMM yyyy", new System.Globalization.CultureInfo("pl-PL"))</h2>
            <button @onclick="NextWeek">Następny tydzień ❯</button>
        </div>
        <div class="schedule-grid">
            <div class="schedule-header">
                <div class="schedule-column">Pracownicy</div>
                @foreach (var day in GetDaysOfWeek())
                {
                    <div class="schedule-column">
                        @day.ToString("ddd", new System.Globalization.CultureInfo("pl-PL"))<br />
                        @day.Day
                    </div>
                }
            </div>

            @foreach (var user in users)
            {
                <div class="schedule-row">
                    <div class="employee-cell">@user.Name @user.Surname</div>

                    @foreach (var day in GetDaysOfWeek())
                    {
                        <div class="day-cell-wrapper">
                            <div @onclick="() => ShowModal(day)" class="day-cell @(day.Date == DateTime.Today.Date ? "today" : "")">
                                @foreach (var eventItem in GetEventsForDay(day).Where(e => e.UserId == user.Id))
                                {
                                    <div>
                                        <p> @eventItem.Title</p>
                                        <p> @eventItem.Description</p>
                                        <p> @eventItem.Id</p>
                                        <a @onclick=" async () => await ShowSecondModal(eventItem.Id)" class="fa-solid fa-pen"></a>
                                    </div>
                                }
                            </div>
                          
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    @if (selectedDay.HasValue)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="HideModal">&times;</h1>
                <CreateEvent />
            </div>
        </div>
    }
    @if (isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModal">&times;</h1>
                <UpdateEvent EventIdParam="@selectedEvent.Id" />
            </div>
        </div>
    }
    @if (isLoading)
    {
        <div class="loader"></div>
    }
    @if (isMenuVisible)
    {
        <NavigationMenu />
    }
}


@code {

    private DateTime? selectedDay = null;
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isMenuVisible = false;
    private string menuClickedClass = "";
    private bool isAuthenticated = false;
    private bool shouldRedirect = false;
    private List<UserDto> users = new List<UserDto>();
    private IEnumerable<EventDto> userEvents = new List<EventDto>();
    private EventDto selectedEvent = new EventDto();

    private IEnumerable<EventDto> GetEventsForDay(DateTime day)
    {
        return userEvents.Where(e => e.StartDate.HasValue && e.StartDate.Value.Date == day.Date);
    }
    private async Task GetAllUsers()
    {
        try
        {
            users = await UserService.GetAll();
        }
        catch (Exception ex)
        {
            throw new Exception($"Błąd podczas pobierania użytkowników");
        }
    }
    private async Task GetAllEvents()
    {
        try
        {
            userEvents = await EventService.GetAll();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania wydarzeń: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldRedirect)
        {
            Navigation.NavigateTo("/");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await UserService.GetCurrentUserAsync();

            if (response != null)
            {
                isAuthenticated = true;
            }
            if (!isAuthenticated)
            {
                shouldRedirect = true;
            }
            else
            {
                await GetAllUsers();
                await GetAllEvents();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas sprawdzania zalogowanego użytkownika: {ex.Message}");
            shouldRedirect = true;
        }
    }
    private void ShowMenu()
    {
        isMenuVisible = !isMenuVisible;

        if (isMenuVisible)
        {
            menuClickedClass = "menu-clicked";
        }
        else
        {
            menuClickedClass = "";
        }
    }

    private void CloseModal()
    {
        isVisible = false;
    }

    private async Task ShowSecondModal(Guid Id)
    {
        try
        {

            var eventToUpdate = await EventService.GetById(Id);
            Console.WriteLine($"Event to update: Title: {eventToUpdate.Title}, Id: {eventToUpdate.Id}");

            if (eventToUpdate != null)
            {
                Console.WriteLine($"Event to update: Title: {eventToUpdate.Title}, Id: {eventToUpdate.Id}");
                selectedEvent = eventToUpdate;
                isVisible = true;
                StateHasChanged();

            }
            else
            {
                Console.WriteLine($"Nie znaleziono wydarzenia o ID: {Id}");
            }
        }
        catch(Exception ex)
        {
            throw new Exception($"Nieoczekiwany błąd {ex.Message}");
        }

    }

    private void HideModal()
    {
        selectedDay = null;
    }

    private void ShowModal(DateTime day)
    {
        selectedDay = day;

    }

    private bool IsModalVisible(DateTime day)
    {
        return selectedDay.HasValue && selectedDay.Value.Date == day.Date;
    }

    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

    private IEnumerable<DateTime> GetDaysOfWeek()
    {
        return Enumerable.Range(0, 5).Select(offset => currentWeekStart.AddDays(offset));
    }

    private void PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        StateHasChanged();
    }

    private void NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        StateHasChanged();
    }
}