@page "/kalendarz"
@using KalendarzPracowniczyUI.Components.Pages
@using System.Globalization
@using KalendarzPracowniczyApplication.Dto
@using System.Security.Claims
@using KalendarzPracowniczyUI.Service
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserServiceUI UserService
@inject EventServiceUI EventService
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (!isAuthenticated)
{
    <p>Przekierowanie na stronę logowania...</p>
}
else
{
    <NavigationMenu />
    <div class="weekly-schedule-container">
        <div class="logo-page">
            <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" style="width:25%;" />
        </div>
        <div class="calendar-controls">
            <button @onclick="PreviousWeek">❮ Poprzedni tydzień</button>
            <h2>@currentWeekStart.ToString("MMMM yyyy", new System.Globalization.CultureInfo("pl-PL"))</h2>
            <button @onclick="NextWeek">Następny tydzień ❯</button>
        </div>
        <div class="schedule-grid">
            <div class="schedule-header">
                <div class="schedule-column">Pracownicy</div>
                @foreach (var day in GetDaysOfWeek())
                {
                    <div class="schedule-column">
                        @day.ToString("ddd", new System.Globalization.CultureInfo("pl-PL"))<br />
                        @day.Day
                    </div>
                }
            </div>

            @foreach (var user in users)
            {
                <div class="schedule-row">
                    <div class="employee-cell">@user.Name @user.Surname</div>

                    @foreach (var day in GetDaysOfWeek())
                    {
                        <div class="day-cell-wrapper">
                          
                            <div class="day-cell @(day.Date == DateTime.Today.Date ? "today" : "")" @onclick="() => ShowModal(day)">

                                @foreach (var eventItem in GetEventsForDay(day).Where(e => e.UserId == user.Id))
                                {
                                    <div class="event-item" @onclick:stopPropagation>
                                        <div class="event-details">
                                            <p>@eventItem.Title</p>
                                            <p>@eventItem.Description</p>
                                            <i class="fa-solid fa-car-side"></i><span>@eventItem.Car</span>
                                        </div>
                                        <div>
                                            <i class="fas fa-info-circle"
                                               @onmouseover="() => ShowModificationDetails(eventItem.Id, eventItem.LastModifiedBy, eventItem.LastModifiedTime)"
                                               @onmouseout="HideModificationDetails"></i>
                                            <i @onclick="() => AkceptDelete(eventItem.Id)" class="fa-solid fa-trash delete-icon"></i>

                                            @if (selectedEvent.Id == eventItem.Id && showModificationDetails)
                                            {
                                                <div class="modification-details">
                                                    <p>Ostatnia modyfikacja: @lastModifiedBy</p>
                                                    <p>@lastModifiedOn?.ToString("g")</p>
                                                </div>
                                            }
                                            </div>
                                        <a @onclick="async () => await ShowSecondModal(eventItem.Id)" class="fa-solid fa-pen edit-icon"></a>
                                    </div>
                                }
                            </div>
                        </div>
                      
                    }

                </div>
            }
        </div>
    </div>
    @if (selectedDay.HasValue && !isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <CreateEvent />
            </div>
        </div>
    }
    else if (isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <UpdateEvent EventIdParam="@selectedEvent.Id" />
            </div>
        </div>
    }
    @if (isLoading)
    {
        <div class="loader"></div>
    }
    @if (showDeleteConfirmation)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="() => showDeleteConfirmation = false">&times;</h1>
                <p style="color:white;">Czy na pewno chcesz usunąć ten wyjazd?</p>
                <button @onclick="async () => await ConfirmDelete()" class="btn btn-danger">Usuń</button>
                <button @onclick="() => showDeleteConfirmation = false" class="btn btn-secondary">Anuluj</button>
            </div>
        </div>
    }  
}

@code {
    private DateTime? selectedDay = null;
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private bool shouldRedirect = false;
    private List<UserDto> users = new List<UserDto>();
    private IEnumerable<EventDto> userEvents = new List<EventDto>();
    private EventDto selectedEvent = new EventDto();
    private string? lastModifiedBy = null;
    private DateTime? lastModifiedOn = null;
    private bool showModificationDetails = false;
    private bool showDeleteConfirmation = false;
    private Guid confirmedDeleteEventId;
    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

    private void ShowModificationDetails(Guid eventId, string? modifiedBy, DateTime? modifiedOn)
    {
        selectedEvent.Id = eventId;
        lastModifiedBy = modifiedBy;
        lastModifiedOn = modifiedOn;
        showModificationDetails = true;
    }
    private void AkceptDelete(Guid eventId)
    {
        confirmedDeleteEventId = eventId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {

            await EventService.Delete(confirmedDeleteEventId);
            await GetAllEvents();
        }
        catch(Exception ex)
        {
            throw new Exception($"Nieoczekiwany błąd {ex.Message}");
        }

    }
    private void HideModificationDetails()
    {
        showModificationDetails = false;
    }

    private IEnumerable<EventDto> GetEventsForDay(DateTime day)
    {
        return userEvents.Where(e => e.StartDate.HasValue && e.StartDate.Value.Date == day.Date);
    }
    private async Task GetAllUsers()
    {
        try
        {
            users = await UserService.GetAll();
        }
        catch (Exception ex)
        {
            throw new Exception($"Błąd podczas pobierania użytkowników");
        }
    }
    private async Task GetAllEvents()
    {
        try
        {
            userEvents = await EventService.GetAll();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania wydarzeń: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldRedirect)
        {
            Navigation.NavigateTo("/");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await UserService.GetCurrentUserAsync();

            if (response != null)
            {
                isAuthenticated = true;
            }
            if (!isAuthenticated)
            {
                shouldRedirect = true;
            }
            else
            {
                await GetAllUsers();
                await GetAllEvents();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas sprawdzania zalogowanego użytkownika: {ex.Message}");
            shouldRedirect = true;
        }
    }

    private async Task CloseModalAndRefresh()
    {
        isVisible = false;
        selectedDay = null;
        await GetAllEvents();

        StateHasChanged();
    }
    private async Task ShowSecondModal(Guid Id)
    {
        try
        {
            var eventToUpdate = await EventService.GetById(Id);

            if (eventToUpdate != null)
            {
                selectedEvent = eventToUpdate;
                isVisible = true;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                throw new Exception($"Nie odnaleziono wyjazdu!");
            }
        }
        catch(Exception ex)
        {
            throw new Exception($"Nieoczekiwany błąd {ex.Message}");
        }
    }
    private void HideModal()
    {
        selectedDay = null;
    }
    private void ShowModal(DateTime day)
    {
        selectedDay = day;

    }
    private bool IsModalVisible(DateTime day)
    {
        return selectedDay.HasValue && selectedDay.Value.Date == day.Date;
    }
    private IEnumerable<DateTime> GetDaysOfWeek()
    {
        return Enumerable.Range(0, 5).Select(offset => currentWeekStart.AddDays(offset));
    }
    private void PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        StateHasChanged();
    }
    private void NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        StateHasChanged();
    }
}