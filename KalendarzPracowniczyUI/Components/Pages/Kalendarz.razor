@page "/kalendarz"
@using KalendarzPracowniczyUI.Components.Pages
@using System.Globalization
@using KalendarzPracowniczyApplication.Dto
@using System.Security.Claims
@using KalendarzPracowniczyUI.Service
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserServiceUI UserService
@inject EventServiceUI EventService
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject CarServiceUI CarServiceUI
@rendermode InteractiveServer

<style>
    .btn-danger {
        width: 60%;
        padding: 12px;
        background-color: rgba(255, 69, 58, 0.7); 
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(255, 69, 58, 0.3), 0 0 10px rgba(255, 69, 58, 0.4); 
    }

        .btn-danger:hover {
            background-color: #ff453a; 
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(255, 69, 58, 0.5), 0 0 15px rgba(255, 69, 58, 0.6);
        }

    .btn-secondary {
        width: 60%;
        padding: 12px;
        background-color: rgba(0, 150, 255, 0.7); /
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4); 
    }

        .btn-secondary:hover {
            background-color: #00aaff; 
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6); 
        }
</style>

@if (!isAuthenticated && isLoading)
{
    <p style="color:white;">Przekierowanie na stronę logowania...</p>
    <div class="loader"></div>
}
else
{
    <NavigationMenu />
    <div class="weekly-schedule-container">
      
        <div class="calendar-controls">
            <button @onclick="PreviousWeek">❮</button>
            <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" style="width:8%; margin-left:-20%;" />
            <h2>@currentWeekStart.ToString("MMMM yyyy", new System.Globalization.CultureInfo("pl-PL"))</h2>
            <button @onclick="NextWeek">❯</button>
        </div>
        <div class="schedule-grid">
            <div class="schedule-header">
                <div class="schedule-column">Pracownicy</div>
                @foreach (var day in GetDaysOfWeek())
                {
                    <div class="schedule-column">
                        <span style="font-size:20px; color:white;"> @day.ToString("ddd", new System.Globalization.CultureInfo("pl-PL")) @day.Day </span>
                        <span>Wolne samochody <i class="fa-solid fa-car-side">: @GetAvailableCars(day)</i></span>
                    </div>
                }
            </div>
                @foreach (var user in users)
                {
                    <div class="schedule-row">
                        <div class="employee-cell">
                        <p>@user.Name @user.Surname</p>
                        </div>

                        @foreach (var day in GetDaysOfWeek())
                        {
                            <div class="day-cell-wrapper">

                                <div class="day-cell @(day.Date == DateTime.Today.Date ? "today" : "")" @onclick="() => ShowModal(day)">

                                    @foreach (var eventItem in GetEventsForDay(day).Where(e => e.UserId == user.Id))
                                    {
                                        @if (!eventItem.IsDeleted)
                                        {
                                            <div class="event-item" @onclick:stopPropagation>
                                                <div class="event-details">
                                                    <span style="width: 100%; padding-left: 0;"> @eventItem.Title</span>
                                                    <span class="fas fa-info-circle"
                                                          @onmouseover="() => ShowModificationDetails(eventItem.Id, eventItem.LastModifiedBy, eventItem.LastModifiedTime)"
                                                          @onmouseout="HideModificationDetails"></span>
                                                    <span @onclick="() => AkceptDelete(eventItem.Id)" class="fa-solid fa-trash delete-icon" style="font-size:large"></span>
                                                </div>
                                                @if (selectedEvent.Id == eventItem.Id && showModificationDetails)
                                                {
                                                    <div class="modification-details">
                                                        <p>Opis: @eventItem.Description</p>
                                                        <span> @eventItem.Name</span>
                                                        <span>@(eventItem.Car != null && !string.IsNullOrEmpty(eventItem.Car.Model) ? $"{eventItem.Car.Name} {eventItem.Car.Model}" : "Brak samochodu")</span><i class="fa-solid fa-car-side"></i>
                                                        <p>Ostatnia modyfikacja: @lastModifiedBy</p>
                                                        <p>@lastModifiedOn?.ToString("g")</p>
                                                    </div>
                                                }
                                            </div>
                                            <a @onclick="async () => await ShowSecondModal(eventItem.Id)" class="fa-solid fa-pen edit-icon" style="font-size:large"></a>
                                        }
                                        else
                                        {
                                            <div>
                                                <span class="fas fa-info-circle" style="color:red;"
                                                      @onmouseover="() => ShowModificationDetails(eventItem.Id, eventItem.LastModifiedBy, eventItem.LastModifiedTime)"
                                                      @onmouseout="HideModificationDetails"></span>

                                                @if (selectedEvent.Id == eventItem.Id && showModificationDetails)
                                                {
                                                    <div class="modification-details">
                                                        <span style="color:red;">Usunął: @eventItem.DeletedBy</span>
                                                        <p style="color:red;">Miejsce: @eventItem.Title</p>
                                                        <p style="color:red;">Opis: @eventItem.Description</p>
                                                        <span style="color:red;"><i class="fa-solid fa-car-side" style="color:red;"></i>@(eventItem.Car != null && !string.IsNullOrEmpty(eventItem.Car.Model) ? $"{eventItem.Car.Name} {eventItem.Car.Model}" : "Brak samochodu")</span>
                                                    </div>
                                                }

                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
        </div>
    </div>
    @if (selectedDay.HasValue && !isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <CreateEvent />
            </div>
        </div>
    }
    else if (isVisible)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <UpdateEvent EventIdParam="@selectedEvent.Id" />
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="loader"></div>
    }
    @if (errorMessage != null)
    {
        <div class="message">@errorMessage</div>
    }
    @if (showDeleteConfirmation)
    {
        <div class="my_modal">
            <div class="my_modal_content">
                <h1 class="close" @onclick="() => showDeleteConfirmation = false">&times;</h1>
                <p style="color:white;">Czy na pewno chcesz usunąć ten wyjazd?</p>
                <button @onclick="async () => await ConfirmDelete()" class="btn btn-danger">Usuń</button>
                <button @onclick="() => showDeleteConfirmation = false" class="btn btn-secondary">Anuluj</button>
                @if (isSuccess)
                {
                    <p class="success-message">Wyjazd został usunięty!</p>
                }
            </div>
        </div>
    }  
   
}

@code {
    private List<CarDto> carDtos = new List<CarDto>();
    private int carCount;
    private string? errorMessage;
    private bool isSuccess = false;
    private DateTime? selectedDay = null;
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private bool shouldRedirect = false;
    private List<UserDto> users = new List<UserDto>();
    private List<EventDto> userEvents = new List<EventDto>();
    private EventDto selectedEvent = new EventDto();
    private string? lastModifiedBy = null;
    private DateTime? lastModifiedOn = null;
    private bool showModificationDetails = false;
    private bool showDeleteConfirmation = false;
    private Guid confirmedDeleteEventId;
    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

    private void ShowModificationDetails(Guid eventId, string? modifiedBy, DateTime? modifiedOn)
    {
        selectedEvent.Id = eventId;
        lastModifiedBy = modifiedBy;
        lastModifiedOn = modifiedOn;
        showModificationDetails = true;
    }
    private void AkceptDelete(Guid eventId)
    {
        confirmedDeleteEventId = eventId;
        showDeleteConfirmation = true;
        isSuccess = false;
    }
    private async Task<int> GetAllCars()
    {
        try
        {
            carDtos = await CarServiceUI.GetAll();
            return carDtos.Count;
        }
        catch
        {
            return 0;
        } 
    }
    private async Task LoadExistingEvents()
    {
        try
        {
            userEvents = await EventService.GetAll();
        }
        catch
        {
            userEvents = new List<EventDto>();
        }
    }
    private int GetAvailableCars(DateTime date)
    {
        int reservedCars = userEvents.Count(e => !e.IsDeleted && e.StartDate.Value.Date == date.Date);
        return carCount - reservedCars;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await EventService.Delete(confirmedDeleteEventId);
            isSuccess = true;

            await GetAllEvents();
        }
        catch(Exception ex)
        {
            errorMessage = ($"Nieoczekiwany błąd {ex.Message}");
            isSuccess = false;
        }


    }
    private void HideModificationDetails()
    {
        showModificationDetails = false;
    }

    private IEnumerable<EventDto> GetEventsForDay(DateTime day)
    {
        return userEvents.Where(e => e.StartDate.HasValue && e.StartDate.Value.Date == day.Date);
    }
    private async Task GetAllUsers()
    {
        try
        {
            users = await UserService.GetAll();
            Console.WriteLine(users);
        }
        catch (Exception ex)
        {
            errorMessage = ($"Błąd podczas pobierania użytkowników");
        }
    }
    private async Task GetAllEvents()
    {
        try
        {
            userEvents = await EventService.GetAll();

        }
        catch (Exception ex)
        {
            errorMessage = ($"Błąd podczas pobierania wydarzeń: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldRedirect)
        {
            Navigation.NavigateTo("/");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await UserService.GetCurrentUserAsync();

            if (response != null)
            {
                isAuthenticated = true;
            }
            if (!isAuthenticated)
            {
                shouldRedirect = true;
            }
            else
            {
                await GetAllUsers();
                await GetAllEvents();
                carCount = await GetAllCars();

            }
        }
        catch (Exception ex)
        {
            errorMessage = ($"Błąd podczas sprawdzania zalogowanego użytkownika: {ex.Message}");
            shouldRedirect = true;
        }
    }

    private async Task CloseModalAndRefresh()
    {
        isVisible = false;
        selectedDay = null;
        await GetAllEvents();

        StateHasChanged();
    }
    private async Task ShowSecondModal(Guid Id)
    {
        try
        {
            var eventToUpdate = await EventService.GetById(Id);

            if (eventToUpdate != null)
            {
                selectedEvent = eventToUpdate;
                isVisible = true;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                errorMessage = ($"Nie odnaleziono wyjazdu!");
            }
        }
        catch(Exception ex)
        {
            errorMessage = ($"Nieoczekiwany błąd {ex.Message}");
        }
    }
    private void HideModal()
    {
        selectedDay = null;
    }
    private void ShowModal(DateTime day)
    {
        selectedDay = day;

    }
    private bool IsModalVisible(DateTime day)
    {
        return selectedDay.HasValue && selectedDay.Value.Date == day.Date;
    }
    private IEnumerable<DateTime> GetDaysOfWeek()
    {
        return Enumerable.Range(0, 5).Select(offset => currentWeekStart.AddDays(offset));
    }
    private void PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        StateHasChanged();
    }
    private void NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        StateHasChanged();
    }
}