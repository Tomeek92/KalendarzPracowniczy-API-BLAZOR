@page "/update-event"
@using KalendarzPracowniczyApplication.CQRS.Commands.Events.Create
@using KalendarzPracowniczyApplication.CQRS.Commands.Events.Update
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject EventServiceUI EventServiceUI
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .event-form-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #1a1a1a;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        color: #f1f1f1;
    }

        .event-form-container h2 {
            text-align: center;
            color: #007bff;
        }

        .event-form-container p {
            margin-bottom: 5px;
            font-weight: bold;
            color: #007bff;
        }

        .event-form-container input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #333;
            border-radius: 5px;
            box-sizing: border-box;
            background-color: #333;
            color: #f1f1f1;
        }

        .event-form-container button {
            width: 100%;
            padding: 10px;
            background-color: #0056b3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

            .event-form-container button:hover {
                background-color: #003d80;
            }

    .loader {
        border: 8px solid #f3f3f3;
        border-top: 8px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 20px auto;
    }

    .logo {
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .logo img {
            width: 120px;
            height: auto;
        }

    .message, .success-message {
        padding: 15px;
        border-radius: 5px;
        font-size: 16px;
        font-weight: bold;
        position: relative;
        left: 10px;
        margin: 30px auto;
        width: 80%;
        max-width: 600px;
    }

    .message {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>
<NavigationMenu/>
<div class="logo">
    <img src="logo.png" />
</div>
<div class="event-form-container">
    <h2>Zmień dane wyjazdu</h2>

    <EditForm Model="eventCommand" OnValidSubmit="UpdateEvents">
        <div>
            <p>Miejsce wyjazdu</p>
            <InputText @bind-Value="eventCommand.Title" />
        </div>
        <div>
            <p>Opis</p>
            <InputText @bind-Value="eventCommand.Description" />
        </div>
        <div>
            <p>Data dodania:</p>
            <InputDate @bind-Value="eventCommand.StartDate" />
        </div>
        <div>
            <p>Prawdopodobny czas zakończenia:</p>
            <InputDate @bind-Value="eventCommand.EndDate" />
        </div>
        <div>
            <p>Dodał: @currentUserName</p>
        </div>
        <div>
            <button type="submit">Zmień wyjazd!</button>
        </div>
    </EditForm>
    </div>
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="message">@message</p> 
    }

    @if (isSuccess)
    {
        <p class="success-message">Zadanie zostało dodane pomyślnie!</p>
    }


@code {
    [SupplyParameterFromForm]
    public UpdateEventCommand eventCommand { get; set; } = new();
    private string? currentUserName;
    private string? message;
    private bool isSuccess;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            currentUserName = user.Identity.Name;
        }
        else
        {
            currentUserName = "Niezalogowany";
        }
    }

    public async Task UpdateEvents()
    {
        try
        {
            await EventServiceUI.Update(eventCommand);
            isSuccess = true;
            message = null;
        }
        catch (Exception ex)
        {
            message = $"Wystąpił błąd: {ex.Message}";
            isSuccess = false;
        }
    }
}