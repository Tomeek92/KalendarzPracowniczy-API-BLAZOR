
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@inject CarServiceUI CarServiceUI
@inject UserServiceUI UserServiceUI
@inject EventServiceUI EventServiceUI
@inject IJSRuntime JSRuntime

<style>
 .event-form-container {
    height: 50%;
    max-width: 90%;
    margin: 0 auto;
    padding: 20px;
    border-radius: 12px;
    color: #f1f1f1;
    backdrop-filter: blur(10px);
}

.event-form-container h2 {
    text-align: center;
    color: #00aaff; 
    text-shadow: 0 0 8px rgba(0, 170, 255, 0.8), 0 0 12px rgba(0, 170, 255, 0.1); 
}

.event-form-container p {
    margin-bottom: 2px;
    font-weight: bold;
    color: #00aaff; 
}

.event-form-container input {
    width: 100%;
    padding: 10px;
    margin-bottom: -5px;
    border: 1px solid rgba(0, 150, 255, 0.5); 
    border-radius: 8px;
    box-sizing: border-box;
    background-color: rgba(255, 255, 255, 0.1); 
    color: #f1f1f1;
    transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
}

.event-form-container input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.2); 
    border-color: #00aaff;
    box-shadow: 0 0 10px rgba(0, 150, 255, 0.5), inset 0 0 8px rgba(0, 150, 255, 0.4);
}

.event-form-container button {
    width: 100%;
    padding: 8px;
    background-color: rgba(0, 150, 255, 0.4); 
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
    box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
}

.event-form-container button:hover {
    background-color: #00aaff; 
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6);
}

/* Loader - animacja ładowania */
.loader {
    border: 8px solid rgba(255, 255, 255, 0.2);
    border-top: 8px solid #00aaff; 
    border-radius: 50%;
    width: 25px;
    height: 25px;
    animation: spin 1s linear infinite;
    margin: 20px auto;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
}

.logo img {
    width: 80px;
    height: auto;
    margin-right:65%;
}
    /*Wybór samochodu*/
    div {
        margin-bottom: 20px;
    }

    p {
        font-weight: bold;
        color: #00aaff;
        margin-bottom: 8px;
    }

    select {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(0, 150, 255, 0.5);
        color: #f1f1f1;
        font-size: 16px;
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

        select:focus {
            outline: none;
            background-color: rgba(255, 255, 255, 0.2);
            border-color: #00aaff;
            box-shadow: 0 0 10px rgba(0, 150, 255, 0.5), inset 0 0 8px rgba(0, 150, 255, 0.4);
        }

    option {
        background-color: #2b2f3a;
        color: #f1f1f1;
    }


        option[value=""] {
            color: rgba(255, 255, 255, 0.5);
        }
/* Wiadomości */
.message, .success-message {
    padding: 5px;
    border-radius: 5px;
    font-size: 12px;
    font-weight: bold;
    position: relative;
    left: 10px;
    margin: 20px auto;
    width: 80%;
    max-width: 400px;
    text-align: center;
}

.message {
    background-color: rgba(255, 80, 80, 0.1); 
    color: #ff4c4c; 
    border: 1px solid #ff4c4c; 
    box-shadow: 0 0 15px rgba(255, 0, 0, 0.4); 
}

.success-message {
    background-color: rgba(80, 255, 80, 0.1); 
    color: #00ff00; 
    border: 1px solid #00ff00; 
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.4);
}
</style>
<div class="logo">
    <img src="UNISOFT_logo_CMYK_z_polem_ochronnym_alfa_white.png" />
</div>
<div class="event-form-container">
    <h2>Zmień dane wyjazdu</h2>

    <EditForm Model="eventDto" OnValidSubmit="UpdateEvents">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <p>Miejsce wyjazdu</p>
            <InputText @bind-Value="eventDto.Title" />
        </div>
           <div>
            <p>Praca - Urlop</p>
            <select @onchange="WorkPlaceChange">
                <option value="">Wybierz miejsce</option>
                <option value="Biuro">Biuro</option>
                <option value="Wyjazd-słuzbowy">Wyjazd służbowy</option>
                <option value="Zdalna-okazjonalna">Zdalna okazjonalna</option>
                <option value="Zdalna">Zdalna</option>
            </select>
        </div>
        <div>
            <p>Opis</p>
            <InputText @bind-Value="eventDto.Description" />
        </div>
        <div>
            <p>Data dodania:</p>
            <InputDate @bind-Value="eventDto.StartDate" @onchange="HandleDateChange" />
        </div>
        <div>
            <p>Dla kogo?</p>
            <select @bind="eventDto.UserId">
                <option value="">-- Wybierz użytkownika --</option>
                @foreach (var user in userDtos)
                {
                    <option value="@user.Id">@user.Name @user.Surname</option>
                }
            </select>
        </div>
        <div>
            <p>Samochód:</p>
            <select @bind="eventDto.CarId">
                <option value="">-- Bez samochodu --</option>
                @foreach (var car in carDtos)
                {
                    <option value="@car.Id">@car.Name @car.Model @car.CarPlatesNumber</option>

                }
            </select>
        </div>
        <div>
            <button type="submit">Zmień wyjazd!</button>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p class="message">@message</p>
}

@if (isSuccess)
{
    <p class="success-message">Zadanie zostało zaktualizowane!</p>
}
@if (isLoading)
{
    <div class="loader"></div>
}

@code {
    [Parameter]
    public Guid EventIdParam { get; set; } 
    [Parameter] 
    public EventCallback OnClose { get; set; }
    [Parameter]
    public DateTime? SelectedDate { get; set; }
    private EventDto eventDto = new EventDto();
    private List<UserDto> userDtos = new List<UserDto>();
    private string? message;
    private bool isSuccess;
    private bool isLoading = false;
    private List<CarDto> carDtos = new();
    private CarDto carDto = new();
    private string selectedWorkplace = string.Empty;
    private List<EventDto> existingEvents = new List<EventDto>();
    private bool hasError = false;
    private DateTime? previousDate;

    protected override async Task OnInitializedAsync()
    {
        eventDto.StartDate = SelectedDate;
        if (EventIdParam != Guid.Empty)
        {
            eventDto = await EventServiceUI.GetById(EventIdParam);
        }
        else
        {
            message = ("Nie przekazano prawidłowego ID.");
        }
        await GetAllCars();
        await GetAllUsers();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (eventDto.StartDate != previousDate)
        {
            previousDate = eventDto.StartDate;
            await CheckAvailableCarsAsync(eventDto.StartDate.Value.Date);
        }
    }
    private void WorkPlaceChange(ChangeEventArgs e)
    {
        selectedWorkplace = e.Value.ToString();
        eventDto.Name = selectedWorkplace;
    }
    private bool IsCarAssignedToInvalidWorkplace()
    {
        var isCarAssignedToInvalidWorkPlace = eventDto.CarId != null && (selectedWorkplace == "Zdalna-okazjonalna" || selectedWorkplace == "Zdalna" || selectedWorkplace == "Biuro" || selectedWorkplace == "Urlop");
        return isCarAssignedToInvalidWorkPlace;
    }
    private async Task HandleDateChange(ChangeEventArgs e)
    {
        var selectedDate = (DateTime)e.Value;
        await CheckAvailableCarsAsync(selectedDate);
    }
    private bool IsCarReservedOn()
    {
        var isCarReservedOn = existingEvents.Any(e => e.CarId == eventDto.CarId
            && e.StartDate.Value.Date == eventDto.StartDate.Value.Date
            && e.CarId != null);

        return isCarReservedOn;
    }
    private async Task GetAllCars()
    {
        try
        {
            carDtos = await CarServiceUI.GetAll();
        }
        catch
        {
            message = ("Błąd podczas pobierania listy samochodów");
        }
    }
    private async Task CheckAvailableCarsAsync(DateTime selectedDate)
    {
        carDtos = await CarServiceUI.GetAvailableCarsAsync(selectedDate);
        StateHasChanged();
    }
    private async Task WaitFiveSec()
    {
        await JSRuntime.InvokeVoidAsync("hideMessageAfterTimeout", ".success-message,.message", 5000);

        await InvokeAsync(StateHasChanged);
    }

    public async Task UpdateEvents()
    {
        try
        {
            hasError = false;

            if (IsCarReservedOn())
            {
                message = "Samochód jest już zarezerwowany na ten dzień.";
                await WaitFiveSec();
                isSuccess = false;
                hasError = true;
            }
            if (IsCarAssignedToInvalidWorkplace())
            {
                message = "Nie możesz przypisać samochodu do pracy zdalnej, zdalnej okazjonalnej oraz biura";
                await WaitFiveSec();
                isSuccess = false;
                hasError = true;
            }
            if (!hasError)
            {
                isLoading = true;
                await EventServiceUI.Update(eventDto);
                isSuccess = true;
                message = null;
            }
        }
        catch (Exception ex)
        {
            message = $"Wystąpił błąd: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task GetAllUsers()
    {
        try
        {
            userDtos = await UserServiceUI.GetAll();
        }
        catch
        {
            message = $"Błąd podczas pobierania użytkowników";
        }
    }
    
}