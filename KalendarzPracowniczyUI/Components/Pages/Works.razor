@page "/to-do"
@rendermode InteractiveServer
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@inject WorkServiceUI workService
@inject IJSRuntime JSRuntime
@inject UserServiceUI userService
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms

<style>
.task-manager-container {
    max-width: 600px;
    margin: 120px auto;
    padding: 20px;
    background-color: rgba(0, 10, 30, 0.85);
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 150, 255, 0.4);
    color: #f1f1f1;
}

h3 {
    text-align: center;
    color: #00aaff;
    margin-bottom: 20px;
    font-size: 25px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #00aaff;
}

input[type="text"] {
    display: block;
    width: 100%;
    padding: 12px;
    margin-bottom: 15px;
    border-radius: 8px;
    background-color: rgba(255, 255, 255, 0.1);
    color: #f1f1f1;
    border: 1px solid rgba(0, 150, 255, 0.5);
}

button {
    width: 100%;
    padding: 10px;
    background-color: rgba(0, 150, 255, 0.5);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
    margin-bottom: 10px;
}

button:hover {
    background-color: #00aaff;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

th, td {
    padding: 15px;
    text-align: left;
    border: 1px solid rgba(0, 150, 255, 0.5);
    transition: background-color 0.3s;
}

th {
    background-color: rgba(0, 150, 255, 0.3);
    color: white;
}

tr {
    background-color: rgba(0, 10, 30, 0.85);
}

tr:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

tr.completed {
    background-color: #00c853;
}

input[type="checkbox"] {
    transform: scale(1.5);
    cursor: pointer;
}

.loader {
    border: 4px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    border-top: 4px solid #00aaff;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    margin: 10px auto;
}

.input-group {
    width: 90%;
    padding: 12px;
    margin-bottom: 15px;
    border: 1px solid rgba(0, 150, 255, 0.5);
    border-radius: 8px;
    background-color: rgba(255, 255, 255, 0.1);
    color: #f1f1f1;
    transition: border-color 0.3s, box-shadow 0.3s;
    font-size:17px;
}

.input-group:focus {
    border-color: #00aaff;
    box-shadow: 0 0 5px rgba(120, 144, 156, 0.5);
    outline: none;
}

@@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

    .pagination, .pagination-text {
    justify-content:center;
    display:flex;
    margin-top:1%;
}

    .pagination-button {
        width: 20%;
        padding: 5px;
        background-color: rgba(0, 150, 255, 0.7);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
}
</style>
<NavigationMenu />
<div class="task-manager-container">
    <h3>Zarządzaj zadaniami</h3>

    <EditForm Model="@newWork" OnValidSubmit="AddTaskAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="title">Tytuł zadania</label>
        <InputText id="title" @bind-Value="newWork.Title" placeholder="Wprowadź tytuł zadania" class="input-group" />

        <label for="description">Opis zadania</label>
        <InputText id="description" @bind-Value="newWork.Description" placeholder="Wprowadź opis zadania" class="input-group" />

        <label for="startDate">Data rozpoczęcia</label>
        <InputDate id="startDate" @bind-Value="newWork.StartDate" Format="dd.MM.yyyy" class="input-group" />

        <label for="endDate">Prawdopodobny czas zakończenia zadania</label>
        <InputDate id="endDate" @bind-Value="newWork.EndDate" Format="dd.MM.yyyy" class="input-group" />
        <button type="submit">Dodaj zadanie</button>

        @if (isLoading)
        {
            <div class="loader"></div>
        }

        @if (errorMessage != null)
        {
            <div class="message">@errorMessage</div>
        }

        @if (successMessage != null)
        {
            <div class="success-message">@successMessage</div>
        } 
    </EditForm>

    <h4>Lista zadań:</h4>
    @if (works.Count == 0)
    {
        <p>Brak zadań do wyświetlenia.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Tytuł</th>
                    <th>Opis</th>
                    <th>Data rozpoczęcia:</th>
                    <th>Prawdopodobna data zakończenia:</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var work in PaginatedWorks)
                {
                    <tr>
                        
                        <td>@work.Title</td>
                        <td>@work.Description</td>
                        <td>@(work.StartDate.HasValue ? work.StartDate.Value.ToString("dd.MM.yyyy") : "Brak daty")</td>
                        <td>@(work.EndDate.HasValue ? work.EndDate.Value.ToString("dd.MM.yyyy") :"Brak daty")</td>
                        <td>
                            <button @onclick="() => RemoveTask(work.Id)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if(works.Count > PageSize)
    {
        <div class="pagination">
            <button class="pagination-button" @onclick="PreviousPage" disabled="@IsFirstPage">&#8592;</button>
            <span class="pagination-text">Strona @CurrentPage z @TotalPages</span>
            <button class="pagination-button" @onclick="NextPage" disabled="@IsLastPage">&#8594;</button>
        </div>
    }
</div>

@code {
    private WorkDto newWork = new();
    private List<WorkDto> works = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private string userId;
    private int CurrentPage { get; set; } = 1; 
    private IEnumerable<WorkDto> PaginatedWorks =>
        works.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
    private int TotalPages => (int)Math.Ceiling((double)works.Count / PageSize);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;
    private int PageSize { get; set; } = 3;
    private async Task AddTaskAsync()
    {
        try
        {
            isLoading = true;
            newWork.UserId = userId;

            if(newWork.EndDate < newWork.StartDate)
            {
                errorMessage = "Data końca zadania nie powinna być wcześniejsza od daty startu zadania";
                isLoading = false;
                await WaitFiveSec();
            }
            else
            {
                await workService.Create(newWork);

                successMessage = "Zadanie zostało dodane!";
                await WaitFiveSec();
                await GetAllWork();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            await WaitFiveSec();
        }
        finally
        {
            isLoading = false;

        }
    }
    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
        }
    }
    private async Task WaitFiveSec()
    {
        await JSRuntime.InvokeVoidAsync("hideMessageAfterTimeout", ".success-message,.errorMessage", 5000);

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        newWork.StartDate = DateTime.UtcNow.Date;
        newWork.EndDate = DateTime.UtcNow.Date;
        newWork.CreatedAt = DateTime.UtcNow.Date;
        await GetAllWork();

    }

    private async void UpdateTaskStatus(WorkDto task)
    {
        try
        {
            await workService.Update(task);
            successMessage = "Zadanie zostało zaktualizowane!";
        }
        catch(Exception ex)
        {
            errorMessage = ($"Błąd podczas aktualizowania zadania {ex.Message}");
        }
    }
    private async Task GetAllWork()
    {
        var currentUser = await userService.GetCurrentUserAsync();
        if(currentUser != null)
        {
            userId = currentUser.Id;
            works = await workService.GetUserTaskById(userId);
        }
        else
        {
            errorMessage = "Nie udało się pobrać zalogowanego użytkownika.";
        }
    }
    private async Task RemoveTask(Guid id)
    {
        try
        {
            await workService.Delete(id);
            successMessage = "Zadanie zostało usunięte!";
            await GetAllWork();
            if (CurrentPage > TotalPages)
            {
                CurrentPage = TotalPages;
            }
        }
        catch(Exception ex)
        {
            errorMessage = ($"Błąd podczas usuwania zadania  {ex.Message}");
        }
    }
}