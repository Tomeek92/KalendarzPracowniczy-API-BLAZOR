@page "/to-do"
@rendermode InteractiveServer
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@inject WorkServiceUI workService

<NavigationMenu/>
@if (tasks == null)
{
    <div class="loader"></div>
}
else
{
    if (tasks.Count == 0)
    {
        <p>Brak zadań do wyświetlenia.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Tytuł</th>
                    <th>Opis</th>
                    <th>Data rozpoczęcia</th>
                    <th>Data zakończenia</th>
                    <th>Ukończone</th>
                    <th>Utworzone</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@task.EndDate.ToString("yyyy-MM-dd") ?? "N/A"</td>
                        <td>@(task.IsCompleted ? "Tak" : "Nie")</td>
                        <td>@task.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
@if (errorMessage != null)
{
    <div class="message">@errorMessage</div>
}

@if (successMessage != null)
{
    <div class="success-message">@successMessage</div>
}

@code {
    private string? errorMessage;
    private string? successMessage;
    private List<WorkDto>? tasks;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await workService.GetUserAllTasks();
            successMessage = "Pomyślnie wyświetlono zadania";
            errorMessage = null;
        }
        catch(Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            successMessage = null;
        }

       
    }

}
