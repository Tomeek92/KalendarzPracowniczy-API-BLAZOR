@page "/dayOff"
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@inject NavigationManager Navigation
@inject DayOffServiceUI DayOffService
@inject UserServiceUI UserService
@rendermode InteractiveServer
<style>

        p,h3,span {

            font-weight: bold;
            color: #00aaff;
            margin-bottom: 3px;
        }


    .btn-secondary {
        width: 60%;
        padding: 8px;
        background-color: rgba(0, 150, 255, 0.7);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
        margin-top:10px;
    }

    .buttonChange {
        width: 50%;
        padding: 7px;
        background-color: rgba(0, 150, 255, 0.7);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
    }
    button{
        width: 20%;
        padding: 5px;
        background-color: rgba(0, 150, 255, 0.7);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
    }

        .btn-secondary:hover,.buttonChange:hover,button:hover {
            background-color: #00aaff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6);
        }
        
    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
    }

    th, td {
        padding: 15px;
        text-align: center;
        border: 1px solid rgba(0, 150, 255, 0.5);
        color: #f1f1f1;
        white-space: nowrap;
    }

    th {
        background-color: rgba(0, 150, 255, 0.3);
        color: white;
    }

    input[type="date"] {
        width: 50%;
        padding: 10px;
        margin-bottom: -5px;
        border: 1px solid rgba(0, 150, 255, 0.5);
        border-radius: 8px;
        box-sizing: border-box;
        background-color: rgba(255, 255, 255, 0.1);
        color: #f1f1f1;
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

    select {
        width: 50%;
        padding: 10px;
        margin-bottom: -5px;
        border: 1px solid rgba(0, 150, 255, 0.5);
        border-radius: 8px;
        box-sizing: border-box;
        background-color: rgba(255, 255, 255, 0.1);
        color: #f1f1f1;
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

        select option {
            padding: 10px;
            font-size: 16px;
            color: #333;
        }
</style>
@if (showModal)
{
    <div class="my_modal">
        <div class="my_modal_content">
            <h1 class="close">&times;</h1>
            <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <i class="fa-solid fa-umbrella-beach fa-3x" style="color:white;"></i>
                <p>Data absencji</p>
                <EditForm Model="@dayOffDto" OnValidSubmit="CreateDayOffAsync">
                <InputDate @bind-Value="dayOffDto.DateDayOff" />
                <div>
                    <p>Dla kogo?</p>
                    <select @bind="dayOffDto.UserId">
                        @foreach (var user in userDtos)
                        {
                            <option value="@user.Id">@user.Name @user.Surname</option>
                        }
                    </select>
                </div>
                <div>
                    <button class="btn btn-secondary" type="submit">Dodaj urlop!</button>
                </div>
                </EditForm>
                          <h3>Twoje urlopy</h3>
        <table>
            <thead>
                <tr>
                    <th>Data urlopu</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var dayOff in GetCurrentPageDays())
                    {
                        <tr>
                            <td>@dayOff.DateDayOff</td>
                            <td>
                                <button class="buttonChange" @onclick="() => EditDayOff(dayOff)">
                                    <i class="fas fa-edit"></i>
                                    <p style="font-size:12px; color:white;">Zmień</p>
                                </button>
                                <button class="buttonChange" @onclick="() => EditDayOff(dayOff)">
                                    <i class="fa-solid fa-trash delete-icon" style="font-size:25px;"></i>
                                    <p style="font-size:12px; color:white;">Usuń</p>
                                </button>
                            </td>
                        </tr>
                    }
            </tbody>
        </table>
            @if(listDayOff.Count > pageSize)
            {
                <div class="pagination" style="margin-top:-7%;">
                    <button @onclick="PreviousPage"
                            disabled="@(currentPage == 0)">
                        &#8592;
                    </button>
                    <span style="font-size:12px;">
                        (Strona @(currentPage + 1) z @(Math.Ceiling((double)listDayOff.Count / pageSize)))
                    </span>
                    <button @onclick="NextPage"
                            disabled="@(currentPage == (Math.Ceiling((double)listDayOff.Count / pageSize)) - 1)">
                        &#8594;
                    </button>
                </div>
            }
        </div>
    </div>
  
}



@code{
    private DayOffDto dayOffDto = new();
    private bool showModal = true;
    private List<UserDto> userDtos = new();
    private List<DayOffDto> listDayOff = new();
    private string userId;
    private string? errorMessage;
    private int currentPage = 0;
    private int pageSize = 3;

    protected override async Task OnInitializedAsync()
    {
        var loggedUser = await UserService.GetCurrentUserAsync();
        if (loggedUser != null)
        {
            dayOffDto.UserId = loggedUser.Id;
            dayOffDto.Users = userDtos;
        }
        for (int i = 1; i <= 10; i++)
        {
            listDayOff.Add(new DayOffDto 
                {
                    DateDayOff = DateOnly.FromDateTime(DateTime.Now.AddDays(i)) 
                });
        }
        await GetAllUsers();
        await GetAllDaysOff();
        SetTodayDate();
    }

    private void SetTodayDate() 
    {
        dayOffDto.DateDayOff = DateOnly.FromDateTime(DateTime.Today); 
    }
    private IEnumerable<DayOffDto> GetCurrentPageDays()
    {
        return listDayOff.Skip(currentPage * pageSize).Take(pageSize);
    }

    private void NextPage()
    {
        if ((currentPage + 1) * pageSize < listDayOff.Count)
        {
            currentPage++;
        }
    }
    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
        }
    }

    private async Task GetAllDaysOff()
    {
        try
        {
            var currentUser = await UserService.GetCurrentUserAsync();

            if(currentUser != null)
            {
                userId = currentUser.Id;
                listDayOff = await DayOffService.GetElementById(userId);
            }
            else
            {
                errorMessage = "Błąd podczas pobierania użytkownika";
            }
        }
        catch(Exception ex)
        {
            throw new Exception($"Błąd podczas pobierania dni wolnych {ex.Message}");
        }
    }

    public async Task CloseModalAndRefresh()
    {
        Navigation.NavigateTo("/kalendarz");
    }

    public async Task CreateDayOffAsync()
    {
        try
        {
            await DayOffService.Create(dayOffDto);
        }
        catch(Exception ex)
        {
            throw new Exception($"Nieoczekiwany bład {ex.Message}");
        }
    }

    private async Task GetAllUsers()
    {
        try
        {
            userDtos = await UserService.GetAll();
        }
        catch
        {
            errorMessage = $"Błąd podczas pobierania użytkowników";
        }
    }

    private async Task DeleteDayOff(Guid id)
    {
        try
        {
            await DayOffService.Delete(dayOffDto.Id);
        }
        catch(Exception)
        {
            throw new Exception($"Błąd podczas usuwania dnia wolnego");
        }
    }

    private async Task EditDayOff(DayOffDto dayOffDto)
    {
        try
        {
            await DayOffService.Update(dayOffDto);
        }
        catch (Exception)
        {
            throw new Exception($"Błąd podczas usuwania dnia wolnego");
        }
    }



}