@page "/dayOff"
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@inject NavigationManager Navigation
@inject DayOffServiceUI DayOffService
@inject UserServiceUI UserService
@rendermode InteractiveServer
<style>

        p {
            font-weight: bold;
            color: #00aaff;
            margin-bottom: 3px;
        }


    .btn-secondary {
        width: 60%;
        padding: 12px;
        background-color: rgba(0, 150, 255, 0.7);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
    }

        .btn-secondary:hover {
            background-color: #00aaff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6);
        }

</style>
@if (showModal)
{
    <div class="my_modal">
        <div class="my_modal_content">
            <h1 class="close">&times;</h1>
            <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
                <i class="fa-solid fa-umbrella-beach fa-4x" style="color:white;"></i>
                <p>Data absencji</p>
                <EditForm Model="@dayOffDto" OnValidSubmit="CreateDayOffAsync">
                <InputDate @bind-Value="dayOffDto.DateDayOff" />
                <div>
                    <p>Dla kogo?</p>
                    <select @bind="dayOffDto.UserId">
                        @foreach (var user in userDtos)
                        {
                            <option value="@user.Id">@user.Name @user.Surname</option>
                        }
                    </select>
                </div>
                <div>
                    <button class="btn btn-secondary" type="submit">Dodaj urlop!</button>
                </div>
                </EditForm>
        </div>
    </div>
}



@code{

    private DayOffDto dayOff = new();
    private DayOffDto dayOffDto = new();
    private bool showModal = true;
    private List<UserDto> userDtos = new();
    private List<DayOffDto> listUsers = new();
    private string? errorMessage;
    protected override async Task OnInitializedAsync()
    {
        var loggedUser = await UserService.GetCurrentUserAsync();
        if (loggedUser != null)
        {
            dayOffDto.UserId = loggedUser.Id;
            dayOffDto.Users = userDtos;

        }
        await GetAllUsers();
    }

    public async Task CloseModalAndRefresh()
    {
        Navigation.NavigateTo("/kalendarz");
    }

    public async Task CreateDayOffAsync()
    {
        try
        {
            await DayOffService.Create(dayOffDto);
        }
        catch(Exception ex)
        {
            throw new Exception($"Nieoczekiwany bład {ex.Message}");
        }
    }

    private async Task GetAllUsers()
    {
        try
        {
            userDtos = await UserService.GetAll();
        }
        catch
        {
           errorMessage = $"Błąd podczas pobierania użytkowników";
        }
    }
   


}