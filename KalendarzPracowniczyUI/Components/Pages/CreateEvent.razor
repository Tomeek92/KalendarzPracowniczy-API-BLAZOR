@page "/event"
@using KalendarzPracowniczyApplication.CQRS.Commands.Events.Create
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyUI.Service
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject EventServiceUI EventServiceUI
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm method ="post" Model ="eventCommand" OnValidSubmit="CreateEventAsync" ForName="CreateEventDto">


<p>Nazwa zadania</p>
<InputText @bind-Value ="eventCommand.Title"/>
<p>Opis</p>
<InputText @bind-Value ="eventCommand.Description"/>
<p>Data dodadnia:</p>
<InputDate @bind-Value="eventCommand.StartDate"/>
<p>Prawdopodobny czas zakończenia:</p>
<InputDate @bind-Value="eventCommand.EndDate"/>
<p>Dodał: @currentUserName</p>

<p>
    <button type="submit">Dodaj zadanie!</button>
</p>

</EditForm>

@code {

    [SupplyParameterFromForm]
    public CreateEventCommand eventCommand { get; set; } = new();
    private string currentUserName;
    private string? message;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            currentUserName = user.Identity.Name;
        }
        else
        {
            currentUserName = "Niezalogowany";
        }
    }

    public async Task CreateEventAsync()
    {
        try
        {
            await EventServiceUI.Create(eventCommand);
            isSuccess = true;
        }
        catch (Exception ex)
        {
            message = $"Wystąpił błąd: {ex.Message}";
        }
    }

}
