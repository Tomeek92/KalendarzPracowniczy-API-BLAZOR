@page "/car"
@inject CarServiceUI carService
@rendermode InteractiveServer
@using KalendarzPracowniczyApplication.Dto
@using KalendarzPracowniczyDomain.Entities.Cars
@using KalendarzPracowniczyUI.Service

<style>
    .form-container {
        max-width: 80%;
        margin: 0 auto;
        padding: 20px;
        background-color: rgba(0, 10, 30, 0.85);
        box-shadow: 0 0 20px rgba(0, 150, 255, 0.4);
        color: #f1f1f1;
        backdrop-filter: blur(10px);
        margin-right:1px;
        
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
    }

    th, td {
        padding: 15px;
        text-align: left;
        border: 1px solid rgba(0, 150, 255, 0.5);
        color: #f1f1f1;
        white-space: nowrap;
    }

    th {
        background-color: rgba(0, 150, 255, 0.3);
        color: white;
    }

    td input[type="text"], td input[type="date"], .blazor-input {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(0, 150, 255, 0.5);
        color: #f1f1f1;
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

        td input[type="text"]:focus, td input[type="date"]:focus, .blazor-input:focus {
            background-color: rgba(255, 255, 255, 0.2);
            border-color: #00aaff;
            box-shadow: 0 0 10px rgba(0, 150, 255, 0.5), inset 0 0 8px rgba(0, 150, 255, 0.4);
            outline: none;
        }

    .button-add-car {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 50%; 
        margin: 0 auto; 
        height: 100px; 
    }

    .button-text{
        font-family: "Inter", sans-serif;
        font-size: 18px;
        
    }
    button {
        width: 80%;
        padding: 3px;
        background-color: rgba(0, 150, 255, 0.5);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 18px;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 8px rgba(0, 150, 255, 0.3), 0 0 10px rgba(0, 150, 255, 0.4);
    }

        button:hover {
            background-color: #00aaff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 150, 255, 0.5), 0 0 15px rgba(0, 150, 255, 0.6);
        }

    label {
        font-weight: bold;
        color: #00aaff;
        margin-bottom: 5px;
        display: block;
    }

    .delete-btn {
        background-color: #ff4c4c;
        color: white;
        border-radius: 8px;
        padding: 8px 12px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border: none;
    }

        .delete-btn:hover {
            background-color: #ff0000;
        }
</style>
<NavigationMenu />


<div class="form-container">
    <h3>Flota z samochodami</h3>
    <table>
        <thead>
            <tr>
                <th>Marka</th>
                <th>Model</th>
                <th>Rok produkcji</th>
                <th>Tablice rejestracyjne</th>
                <th>Data ostatniego przeglądu</th>
                <th>Przebieg</th>
                <th>Usuń</th>
                <th>Zmień</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.Name</td>
                    <td>@car.Model</td>
                    <td>@car.Production</td>
                    <td>@car.CarPlatesNumber</td>
                    <td>@car.CarInspection</td>
                    <td>@car.CarKm</td>
                    <td>
                        <button @onclick="() => RemoveCar(car.Id)">
                        <i class="fa-solid fa-trash delete-icon"></i>
                        <p style="font-size:12px;">Usuń</p>
                        </button>
                    </td>
                    <td>
                        <button class="buttonChange">
                            <i class="fas fa-edit"></i>
                            <p style="font-size:12px; color:white;">Zmień</p>
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <div class="button-add-car">
        <button class="fa-solid fa-car-burst fa-3x add-car" @onclick="() => showModal = true"> 
            <span class="button-text">Dodaj samochód</span> 
        </button> 
    </div>
</div>
@if (showModal)
{
    <div class="my_modal">
        <div class="my_modal_content">
            <h1 class="close">&times;</h1>
            <i class="fa-solid fa-car-rear fa-5x" style="color:white; font-size:30px;"><span style="font-family: Inter, sans-serif">Dodaj samochód</span></i>
            <h1 class="close" @onclick="CloseModalAndRefresh">&times;</h1>
            <EditForm Model="@newCar" OnValidSubmit="AddCar" FormName="Create">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <br />
                <div>
                    <label>Marka:</label>
                    <InputText @bind-Value="newCar.Name" class="blazor-input" style="width:80%;" />
                </div>
                <div>
                    <label>Model:</label>
                    <InputText @bind-Value="newCar.Model" class="blazor-input" style="width:80%;" />
                </div>
                <div>
                    <label>Rok produkcji:</label>
                    <InputDate @bind-Value="newCar.Production" class="blazor-input" style="width:80%;" />
                </div>
                <div>
                    <label>Numery rejestracyjne:</label>
                    <InputText @bind-Value="newCar.CarPlatesNumber" class="blazor-input" style="width:80%;"/>
                </div>
                <div>
                    <label>Przegląd samochodu:</label>
                    <InputDate @bind-Value="newCar.CarInspection" class="blazor-input" style="width:80%;" />
                </div>
                <div>
                    <label>Przebieg samochodu:</label>
                    <InputText @bind-Value="newCar.CarKm" class="blazor-input" style="width:80%;" />
                </div>
                <br />
                <button type="submit">Dodaj Samochód</button>
            </EditForm>
        </div>
    </div>
}
@if (isLoading)
{
    <div class="loader"></div>
}

@if (errorMessage != null)
{
    <div class="message">@errorMessage</div>
}

@if (successMessage != null)
{
    <div class="success-message">@successMessage</div>
}

            @code {
            private CarDto newCar = new();
            private List<CarDto> cars = new();
            private string? errorMessage;
            private string? successMessage;
            private bool isLoading = false;
            private bool showModal = false;

   protected override async Task OnInitializedAsync()
   {

    await GetAllCars();

   }
   public async Task CloseModalAndRefresh()
   {
     showModal = false;
     await GetAllCars();
   }
    private async Task AddCar()
    {
        try
        {
            isLoading = true;
            await carService.Create(newCar);
            successMessage = "Samochód został dodany!";
            await GetAllCars();
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task RemoveCar(Guid id)
    {
        try
        {
            isLoading = true;
            await carService.Delete(id);
            successMessage = $"Samochód został usunięty!";
            await GetAllCars();
        }
        catch(Exception ex)
        {
            errorMessage = $"Błąd podczas usuwania samochodu. {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task GetAllCars()
    {
        try
        {
            isLoading = true;
            cars = await carService.GetAll();
        }
        catch (Exception ex)
        {
            errorMessage = $"Nie udało się pobrać zalogowanego użytkownika.{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }

    }
}
